#!/bin/bash
cat $0 | grep --color "Step:\|Choice"
exit 0


Why not ? Create VM image with similar config
Install docker + jenkins : https://jenkins.io/doc/tutorials/build-a-node-js-and-react-app-with-npm/



Step: 1 Repo

install git
bitbucket to host repo

  Choice ==> bitbuket (2 developers in private)
________________________________________________________________________________________________________

Step: 2 Editor

vs code
install plugin editorconfig

  Choice ==> VS code
________________________________________________________________________________________________________

Step: 3 Package Mgmt 

npm is the best, goes with nodejs
nodejs is : 
 - a runtime env to run JS code
 - to build back end services 
 - it makes everything JS, back + front
 - lots of open source libraries

  Choice ==> npm
________________________________________________________________________________________________________

Step: 4 Dev WebServer for front end dev

order :
 - webpack server because part of webpack
    * can be associate with browsersync to test multiple platform 
 - express, also a production server, run through node directly si if backend is node it is quite good
 - http-client from npm very simple

* browsersync can be used here also

  Choice ==> express if backend node / Webpack-dev-server  -  + need try browserSync 
________________________________________________________________________________________________________

Step: 5 Sharing work in progress with anybody

simple : localtunnel (instal globally with npm)
creates uniq url to be accessed from web

  Choice ==> localtunnel
________________________________________________________________________________________________________

Step: 6 Automation

ex : grunt, gulp

  Choice ==> npm scripts (prestart start poststart test share ...)
has hooks : convention with script "prestart", will be run auto with npm start (same with post)
________________________________________________________________________________________________________

Step: 7 Transpiling

Why ? 
 - Allows to code using latest JS code features and converts to old ES5 (compatible with all browsers)
 - If new JS feature, transpiler makes sure we can use because it will transpile down to executable code 

typescript vs babel vs elm, what I like :
 - TS : this is typed, hot language today
 - Babel : good to learn how to code purely in JS

babel example : 
 - configured either through .babelrc vs package.json
 - For build script : ES5 vs transpiled

  Choice ==> Typescript (very closed to Babel to learn pure JS ES6)
________________________________________________________________________________________________________

Step: 8 Bundling

  SubStep: a. Module formats to encapsulate code : IIFE, AMD, CJS, UMD, ES6 mod
This is used to encapsulate the code

the past is :
 - Global (always avoid because hard to read and maintain)
 - IIFE : wrap code in function immediately invoked to protect local variables (avoid variable hoisting)
 - AMD : also wrap : define(['jq'], function(jq) {});
now : 
 - CommonJS : good with node (because ES5 ??) var jquery = require('jquery')
 - ES6 module : import jQuery from 'jquery' (then transpile down with babel for ex)
    * Standardized, statically analyzable, fails fast & tree shaking (unused stuff)
    * Each module is a piece of code that is executed once it is loaded.
    * example :

	//------ main.js ------
	import * as lib from 'lib';
	console.log(lib.square(11)); // 121
	console.log(lib.diag(4, 3)); // 5
	16.1.2 Single default export 
	There can be a single default export. For example, a function:

	//------ myFunc.js ------
	export default function () { ··· } // no semicolon!

	//------ main1.js ------
	import myFunc from 'myFunc';
	myFunc();
	Or a class:

	//------ MyClass.js ------
	export default class { ··· } // no semicolon!

	//------ main2.js ------
	import MyClass from 'MyClass';
	const inst = new MyClass();
	Note that there is no semicolon at the end if you default-export a function or a class (which are anonymous declarations).

    Choice ==> ES6 module
__________________________________________________

  SubStep: b. Bundler

Webpack vs browserify (simple) vs Rollup (fast) vs JSPM

Webpack packages more than JS and web server dev hot-reloading
 does Bundle splitting so no loading of everything at once but only the needed

    Choice ==> Webpack

target for webpack : 'web' or for example 'node' if targetted to be run by node

__________________________________________________

  SubStep: c. SourceMaps (how i debug transpiled and bundled code ?)

in webpack config, devtool: 'inline-source-map', other tools e.g more debug but more compile time: search webpack devtool

    Choice ==> None use sourcemaps : add debugger; in code and open devtools in chrome and reload page

________________________________________________________________________________________________________

Step: 9 Linting (enforce code consistency and avoid mistakes)

JSLint old vs JSHint vs ESLint
To use : 
 - plug package eslint-loader : tied with webpack (re-lint upon save)
 - plug package eslint-watch : watch files (esw files in npm scripts)
 (- need babel-eslint to lint experimental features if needed)

disable some rules in build files example : 
one file :    /* eslint-disable no-console */
or one line : // eslint-disable-line no-console

"lint:watch":"npm run lint -- --watch" + run in terminal npm run lint:watch for live lint upon save button

  Choice ==> ESLint (or typescript-eslint) with npm package eslint-watch (esw) - No prettier used - need disable from editor
__________________________________________________

  SubStep: a. ConfigFile

.eslint** files (or in package.json "eslintConfig" : (one less file))

    Choice ==> .eslintrc.json 
__________________________________________________

  SubStep: b. which rules

    Choice ==> see websile eslint, to be choose by team
__________________________________________________

  SubStep: c. warning or errors ?
  exemple :
  "rules": {
    "no-console": 1 // for no-console rule :  1-> warning, set 2 for errors and break build 
  }

    Choice ==> I prefer errors (could also be a mix)
__________________________________________________

  SubStep: d. which plugins (e.g react, angular)

    Choice ==> see popular list in github.com/dustinspecker/awesome-eslint
__________________________________________________

  SubStep: e. OR preset 

"eslint:recommended"
override in : 
  "rules": {
    "no-console": 1
  }
Parser to spec npm package:
"parser":"@typescript-eslint/parser",

    Choice ==> Start with Recommended preset ESLint and add stuff in the way
________________________________________________________________________________________________________

Step: 10 Testing

Styles :
 - unit : single func or module  ==> Focus
 - integration : interaction between modules
 - UI : automate interaction with UI (Selenium)

__________________________________________________

  SubStep: a. Testing FWK
Mocha vs jasmine vs tape vs qunit old vs ava new vs jest for react

See more Mocha reporter on website

    Choice ==> Mocha using reporter : progress
__________________________________________________

  SubStep: b. Assertion library
chai vs expect vs should.js

    Choice ==> Chai
__________________________________________________

  SubStep: c. Helper Library (Test DOM-related without browser like html)
jsdom (simulate DOM in nodeJS) vs cheerio (jquery for server)

    Choice ==> jsdom
__________________________________________________

  SubStep: d. Where to run tests ?
Browser (Karma, Testem) vs headless browser (PhantomJS) vs in-memory DOM (using jsdom above)

    Choice ==> node : in-memory DOM using jsdom, OR phantomjs
__________________________________________________

  SubStep: e. Ehere test files belong ?
centralized in test folder VS alongside with source code
centralized to avoid noise in src and deployment confusion
alongside for : 
   - easy imports, clear visibility (index.js and index.test.js)
   - easy moving files, no need to re-create whole path in test folder

    Choice ==> alongside with source code (index.js and index.test.js or .spec.js)
__________________________________________________

  SubStep: f. When should the test run ? 
 
    Choice ==> When I hit save (but only for unit test)

I did not see code coverage, mocking ...
________________________________________________________________________________________________________

Step: 11 CI - choosing a CI server

Travis CI vs appveyor (win) vs jenkins vi circleCI

  Choice ==> Github public : Travis (+ appveyor for windows) - other : Jenkins

________________________________________________________________________________________________________

Step: 12 HTTP calls (Abstract HTTP API calls)

 - node :
   * http
   * request <--
 - Browser :
   * XMLHTTPRequest
   * jQuery *
   * framework based (includeed in angular)
   * fetch  <--
 - node + browser : both client & server
   * isomorphic-fetch
   * xhr
   * SuperAgent
   * Axios <--

Axios for me ? Since client + server part

Centralize API calls in 1 spot

Example with Fetch

See polyfill, this is to send to the browser an API in case it doesn't have it : for example fetch to call server API
The browser won't run polyfill if it has the API/feature already
use polyfill.io js script in html which will "ask" broswer if he has API or not. If not then we'll send the polyfill

  Choice ==> Edit : Websockets / Don't know... Angular stuff maybe, or AXIOS
__________________________________________________

  SubStep: a. Mock HTTP

Why :
 - unit test
 - instant response
 - in case server is down
 - rapid prototype
 - work offline
 - avoid inter-team bottleneck

Nock (just for UT) vs static json vs dev webserver : api-mock vs JSON server vs JSON schema faker vs browsersync, express ...
     

try JSON schema faker + fake data with faker.js chance.js randexp.js + JSON Server

    Choice ==> Use JSON Schema standard + JSON schema faker + fake data library : faker.js chance.js randexp.js + JSON Server

________________________________________________________________________________________________________

Step: 13 Project structure -> All JS in .js file

Don't dynamically generate JS, generate JSON instead and work with it in JS
__________________________________________________

  SubStep: a. Need Demo app ?

    Choice ==> Maybe not for 2 developers... (but is good to share choices of environment)
__________________________________________________

  SubStep: b. Files organisation

    Choice ==> 2. by file type & 1. by feature

Organize by :
 - file type (e.g for MVC : models data views components)
 - feature : (e.g authors courses)
__________________________________________________

  SubStep: c. Extract Logic to POJOs
    Choice ==> Ok, see example react-slingshot project in src/utils '


________________________________________________________________________________________________________

Step: 14 Going to production


Webpack bundles js

__________________________________________________

  SubStep: a. Minifying

    Choice ==> Minify JS + Dedupe (tree shaking)
__________________________________________________

  SubStep: b. Mean to toggle between mock API and prod API

    Choice ==> Add in address : http://localhost:3000/?useMockApi=true

__________________________________________________

  SubStep: c. Dynamic HTML for prod

Instead of hardcoding in html <script bundle.js

via : node-js vs plugin html-webpack-plugin

    Choice ==> html-webpack-plugin

 
__________________________________________________

  SubStep: d. Bundle Splitting

Better speed as no need to re-download the whole bundle

    Choice ==> bundle 3rd party lib separately












